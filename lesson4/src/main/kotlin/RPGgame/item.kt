package ru.tbank.education.school.lesson3.RPGgame
import kotlinx.serialization.Serializable
/*
1 - –∑–µ–ª—å–µ
2 - —Å–≤–∏—Ç–æ–∫
3 - –∞–∫—Å–µ—Å—Å—É–∞—Ä/–±—Ä–æ–Ω—è
4 - –æ—Ä—É–∂–∏–µ
*/
@Serializable
data class item(
    val type: Int,
    val itemName: String,
    val itemDescription: String,
    val stats: Map<String, Int>,
) : Usable {

    override fun use(user: player): Boolean {
        return when (type) {
            1 -> { // –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è
                val healAmount = stats["hp"]?.toFloat() ?: 0f
                user.hp += healAmount
                println("üíö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è! +${healAmount.toInt()} HP")
                true
            }
            2 -> { // –∑–µ–ª—å–µ —Å–∏–ª—ã
                val powerBoost = stats["power"]?.toFloat() ?: 0f
                user.stats.power += powerBoost
                println("üí™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–µ–ª—å–µ —Å–∏–ª—ã! +${powerBoost.toInt()} –∫ –∞—Ç–∞–∫–µ")
                true
            }
            else -> {
                println("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
                false
            }
        }
    }

    constructor(type: Int, name: String) : this(
        type, name, "–û–ø–∏—Å–∞–Ω–∏–µ $name",
        when (type) {
            1 -> mapOf("hp" to 30)
            2 -> mapOf("power" to 5)
            3 -> mapOf("hp" to 20, "power" to 3)
            4 -> mapOf("power" to 10)
            else -> mapOf()
        }
    )
}