package ru.tbank.education.school.lesson3.RPGgame

import kotlin.math.roundToInt
import kotlin.system.exitProcess

class player(
    val name: String,
    var stats: statblock,
    var inv: MutableMap<item, Int>,
    var currentLocation: location = Village(),
    var completedLoc: Boolean = false,
    override var hp: Float = 100F
) : Damageable, Attacker {

    /*override var hp: Float = 100.0f
        set(value) {
            if (value <= 0) {
                print("–í—ã —É–º–µ—Ä–ª–∏!")
                exitProcess(0)
            }
        }*/

    private val equippedItems = mutableMapOf<String, item>()

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    private val itemGetListener: BattleEventListener = BattleEventListener { itemName ->
        println("üéÅ –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: $itemName")
    }

    override val damage: Float
        get() {
            return stats.power + (equippedItems.values.sumOf { (it.stats["power"]?.toFloat() ?: 0f).toInt() })
        }

    override val damageDeviation: Float
        get() = damage * 0.1f

    override fun getHit(dmg: Float) {
        hp -= dmg
        println("–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ $dmg —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å HP: ${hp.toInt()}")
    }

    override fun attack(target: Damageable) {
        val actualDamage = damage + (-damageDeviation.roundToInt()..damageDeviation.roundToInt()).random()
        println("–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${actualDamage.toInt()} —É—Ä–æ–Ω–∞!")
        target.getHit(actualDamage)
    }

    private fun onDeath() {
        println("–í—ã —É–º–µ—Ä–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        exitProcess(0)
    }

    fun rest() {
        hp = stats.hp
        println("–í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏. HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ $hp")
    }

    fun displayInv() {
        if (inv.isEmpty()) {
            println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç")
            return
        }
        println("=== –ò–ù–í–ï–ù–¢–ê–†–¨ ===")
        inv.forEach { (item, quantity) ->
            println("${item.itemName} - $quantity —à—Ç.")
        }
    }

    fun getItem(itm: item, quantity: Int = 1) {
        inv[itm] = inv.getOrDefault(itm, 0) + quantity
        itemGetListener.onEvent("${itm.itemName} x$quantity")
    }

    fun useItem(itm: item): Boolean {
        if ((inv[itm] ?: 0) > 0) {
            val used = itm.use(this)
            if (used) {
                inv[itm] = inv[itm]!! - 1
                if (inv[itm] == 0) inv.remove(itm)
                return true
            }
        } else {
            println("–ü—Ä–µ–¥–º–µ—Ç '${itm.itemName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
        }
        return false
    }

    fun equipItem(itm: item): Boolean {
        if (itm.type == 3 || itm.type == 4) { // –±—Ä–æ–Ω—è –∏–ª–∏ –æ—Ä—É–∂–∏–µ
            equippedItems[itm.itemName] = itm
            println("‚úÖ –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω: ${itm.itemName}")
            return true
        }
        println("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å")
        return false
    }
}