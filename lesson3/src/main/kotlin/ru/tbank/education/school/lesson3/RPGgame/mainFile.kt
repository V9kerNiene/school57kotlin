package ru.tbank.education.school.lesson3.RPGgame
import java.io.File
import java.util.Locale
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import kotlin.collections.component1
import kotlin.collections.component2
import kotlin.system.exitProcess

// –§—É–Ω–∫—Ü–∏—è –±–∏—Ç–≤—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
fun engageBattle(plr: player, enm: enemy) {
    println("\n=== –ù–ê–ß–ê–õ–û –ë–ò–¢–í–´ ===")
    println("–í—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å ${enm.name}!")

    var playerTurn = true
    while (enm.hp > 0 && plr.hp > 0) {
        println("\n---")
        println("‚ù§Ô∏è –í–∞—à–µ HP: ${plr.hp.toInt()}")
        println("üíÄ HP ${enm.name}: ${enm.hp.toInt()}")
        println("---")

        if (playerTurn) {
            var actionCompleted = false
            while (!actionCompleted) {
                println("–í–∞—à —Ö–æ–¥:")
                println("1 - –ê—Ç–∞–∫–æ–≤–∞—Ç—å")
                println("2 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
                println("3 - –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–±–µ–∂–∞—Ç—å")

                when (readln().toIntOrNull() ?: 1) {
                    1 -> {
                        plr.attack(enm)
                        actionCompleted = true
                    }
                    2 -> {
                        if (plr.inv.isEmpty()) {
                            println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                            continue
                        }

                        println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
                        val itemsList = plr.inv.entries.toList()
                        itemsList.forEachIndexed { index, (item, quantity) ->
                            println("${index + 1} - ${item.itemName} (x$quantity) - ${item.itemDescription}")
                        }
                        println("${itemsList.size + 1} - –û—Ç–º–µ–Ω–∞")

                        val choice = readln().toIntOrNull()
                        when {
                            choice == null -> println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")
                            choice in 1..itemsList.size -> {
                                val selectedItem = itemsList[choice - 1].key
                                val used = plr.useItem(selectedItem)
                                if (used) {
                                    actionCompleted = true
                                } else {
                                    println("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                                }
                            }
                            choice == itemsList.size + 1 -> {
                                println("–û—Ç–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞.")
                                continue
                            }
                            else -> println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                        }
                    }
                    3 -> {
                        println("–í—ã —Å–±–µ–∂–∞–ª–∏ –∏–∑ –±–∏—Ç–≤—ã!")
                        return
                    }
                    else -> {
                        println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                        continue
                    }
                }
            }
        } else {
            println("–•–æ–¥ ${enm.name}:")
            enm.attack(plr)
        }

        playerTurn = !playerTurn
    }

    when {
        plr.hp <= 0 -> {
            println("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –±–∏—Ç–≤—É ${enm.name}... –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
            File("data.txt").delete()
            File("inventory.json").delete()
            exitProcess(0)
        }
        enm.hp <= 0 -> {
            println("üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${enm.name}!")
            plr.completedLoc = true
            // –ü–æ–ª—É—á–∞–µ–º –ª—É—Ç –∑–∞ –ø–æ–±–µ–¥—É
            val loot = plr.currentLocation.getLoot()
            loot.forEach { item ->
                plr.getItem(item)
            }
        }
    }
}

fun saveGame(player: player) {
    val data = "${player.name},${player.stats.hp},${player.stats.mana},${player.stats.stamina},${player.stats.lvl},${player.stats.xp},${player.stats.clasS},${player.stats.race},${player.stats.power},${player.currentLocation.name},${player.hp},${player.completedLoc}"
    File("data.txt").writeText(data)
    val fl1 = File("inventory.json")
    val json = Json {
        prettyPrint = true // –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        ignoreUnknownKeys = true // –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
        allowStructuredMapKeys = true
    }
    val jsonString = json.encodeToString(player.inv)
    fl1.writeText(jsonString)
    println("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
}

fun loadGame(): player? {
    if (!File("data.txt").exists()) return null
    val fl = File("inventory.json")
    var decoded = mutableMapOf<item, Int>()
    val json = Json {
        prettyPrint = true // –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        ignoreUnknownKeys = true // –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
        allowStructuredMapKeys = true
    }
    if (fl.exists()){
        decoded = mutableMapOf<item, Int>(json.decodeFromString(fl.readText()))
    }
    val data = File("data.txt").readText()
    val parts = data.split(",")

    val stats = statblock(
        hp = parts[1].toFloat(),
        mana = parts[2].toFloat(),
        stamina = parts[3].toFloat(),
        lvl = parts[4].toInt(),
        xp = parts[5].toInt(),
        clasS = parts[6],
        race = parts[7],
        power = parts[8].toFloat()
    )
    println(parts[10].toFloat())
    val location = byName(parts[9])
    val player = player(parts[0], stats, decoded, location, parts[11].toBoolean(), parts[10].toFloat())

    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã

    return player
}

fun main() {
    println("–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –º–æ—ë–º —Ç–≤–æ—Ä–µ–Ω–∏–µ - PseudoRPG! –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–æ—Ä–µ–µ –∏–º–∏—Ç–∞—Ü–∏–µ–π –∏–≥—Ä—ã, –∞ –Ω–µ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –Ω–∞–¥–µ—é—Å—å –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!)")
    println("\n\n\n")
    println("=== PSEUDO RPG ===")
    val player = loadGame()
    if (player != null) {
        println("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–≥—Ä–∞!")
        println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${player.name}!")
        gameLoop(player)
    } else {
        println("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        println("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
        var name = readln()
        while (name.contains(',')) {
            println("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:\n")
            name = readln()
        }
        println("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:")
        println("1 - –í–æ–∏–Ω (+5 –∫ —Å–∏–ª–µ)")
        println("2 - –ú–∞–≥ (+50 –∫ –º–∞–Ω–µ)")
        val classChoice = readln().toIntOrNull() ?: 1

        val stats = when (classChoice) {
            2 -> statblock(clasS = "–ú–∞–≥", mana = 150f)
            else -> statblock(clasS = "–í–æ–∏–Ω", power = 15f)
        }

        val player = player(name, stats, mutableMapOf(), hp = stats.hp)

        // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        player.getItem(item(1, "–ü—Ä–æ—Å—Ç–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "–û–±—ã—á–Ω–æ–µ –∑–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", mapOf("hp" to 5)), 2)

        if (classChoice == 1) {
            player.getItem(item(4, "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á. –í—ã–∫–æ–≤–∞–Ω –æ–¥–Ω–∏–º –∏–∑ —Å–µ–ª—è–Ω.", mapOf("power" to 5, "hp" to 5)))
            player.equipItem(item(4, "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á. –í—ã–∫–æ–≤–∞–Ω –æ–¥–Ω–∏–º –∏–∑ —Å–µ–ª—è–Ω.", mapOf("power" to 5, "hp" to 5)))
        } else {
            player.getItem(item(3, "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö", "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, –æ—Ç–∫—É–¥–∞ –æ–Ω –≤ –¥–µ—Ä–µ–≤–Ω–µ", mapOf("power" to 10, "hp" to 15)))
            player.equipItem(item(3, "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö", "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, –æ—Ç–∫—É–¥–∞ –æ–Ω –≤ –¥–µ—Ä–µ–≤–Ω–µ", mapOf("power" to 10, "hp" to 15)))
        }

        println("\n=== –ò–ì–†–ê –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø ===")
        println("\n–¢—ã - –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π ${player.stats.clasS}, –∂–∏–≤—É—â–∏–π –≤ –Ω–∏—á–µ–º –Ω–µ –ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ—Ä–µ–≤—É—à–∫–µ. –í –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –≤ –¥–µ—Ä–µ–≤–Ω–µ –±—ã–ª–∏ –∑–∞–º–µ—á–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ —É–±–∏–π—Å—Ç–≤, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º, –Ω–∞ —Ç–µ–ª–∞—Ö –ø–æ–≥–∏–±—à–∏—Ö –±—ã–ª–∏ —Ä–≤–∞–Ω—ã–µ —Ä–∞–Ω—ã, –Ω–∞–Ω–µ—Å—ë–Ω–Ω—ã–µ, –ø–æ –≤—Å–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏, –º–æ–Ω—Å—Ç—Ä–∞–º–∏. –ü–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ä–µ–π—à–∏–Ω–∞ —Å–µ–ª–µ–Ω–∏—è –¥–∞–ª —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏–µ:\n'${player.name}, —è –¥–æ–≤–µ—Ä—è—é —Ç–µ–±–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω—É—é –º–∏—Å—Å–∏—é - —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–æ–π —á–µ—Ä—Ç–æ–≤—â–∏–Ω–æ–π. –ö —Å–ª–æ–≤—É, —É –Ω–∞—Å –≤ –¥–µ—Ä–µ–≤–Ω–∏ –ø–æ—è–≤–∏–ª—Å—è —Ö—É–ª–∏–≥–∞–Ω, —É—Å—Ç—Ä–æ–π –µ–º—É –≤–∑–±—É—á–∫—É, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.'")

        println("\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: ${player.currentLocation.name}")
        println(player.currentLocation.description)

        gameLoop(player)
    }
}

fun gameLoop(player: player) {
    while (true) {
        println("\n=== ${player.currentLocation.name.uppercase(Locale.getDefault())} ===")
        println("HP: ${player.hp.toInt()}/${player.stats.hp.toInt()} | –£—Ä–æ–≤–µ–Ω—å: ${player.stats.lvl}")
        println("1 - –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é")
        println("2 - –û—Ç–¥–æ—Ö–Ω—É—Ç—å")
        println("3 - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
        println("4 - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É")
        println("5 - –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")

        when (readln().toIntOrNull() ?: 1) {
            1 -> {
                if (!player.completedLoc) {
                    val enemy = player.currentLocation.encounterEnemy()
                    engageBattle(player, enemy)
                    if (player.completedLoc) {
                        player.stats.levelUp()
                    }
                } else {
                    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é
                    player.currentLocation = when (player.currentLocation.name) {
                        "–î–µ—Ä–µ–≤–Ω—è" -> DarkWoods()
                        "–¢—ë–º–Ω—ã–π –ª–µ—Å" -> Cave()
                        "–ü–µ—â–µ—Ä–∞" -> {
                            println("\nüéâ –ü–û–ë–ï–î–ê! –í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–æ–±–µ–¥–∏–ª–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –±–æ—Å—Å–∞!")
                            println("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
                            File("data.txt").delete()
                            exitProcess(0)
                        }
                        else -> Village()
                    }
                    player.completedLoc = false
                    println("\n–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤: ${player.currentLocation.name}")
                    println(player.currentLocation.description)
                }
            }
            2 -> {
                player.rest()
                println("–í—ã –æ—Ç–¥–æ—Ö–Ω—É–ª–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ")
            }
            3 -> {
                if (player.inv.isEmpty()) {
                    println("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                    continue    //1
                }
                var actionCompleted = false
                println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
                val itemsList = player.inv.entries.toList()
                itemsList.forEachIndexed { index, (item, quantity) ->
                    println("${index + 1} - ${item.itemName} (x$quantity) - ${item.itemDescription}")
                }
                println("${itemsList.size + 1} - –û—Ç–º–µ–Ω–∞")

                val choice = readln().toIntOrNull()
                when {
                    choice == null -> println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")
                    choice in 1..itemsList.size -> {
                        val selectedItem = itemsList[choice - 1].key
                        val used = player.useItem(selectedItem)
                        if (used) {
                            actionCompleted = true
                        } else {
                            println("–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                        }
                    }
                    choice == itemsList.size + 1 -> {
                        println("–û—Ç–º–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞.")
                        continue
                    }
                    else -> println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                }
//                player.displayInv()
//                if (player.inv.isNotEmpty()) {
//                    println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç? (y/n)")
//                    if (readln().equals("y", true)) {
//                        val item = player.inv.keys.first()
//                        player.useItem(item)
//                    }
//                }
            }
            4 -> saveGame(player)
            5 -> {
                saveGame(player)
                println("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                exitProcess(0)
            }
        }
    }
}